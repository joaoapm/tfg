package com.j01.telas;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.math.Vector3;
import com.j01.entidades.Mapa;
import com.j01.entidades.Partida;
import com.j01.entidades.Personagem;
import com.j01.estrutura.TipoPersonagem;
import com.j01.helper.PropriedadeHelper;

public class TelaJogo implements Screen {

	private OrthographicCamera camera;
	private SpriteBatch batch;

	private Mapa mapa;
	private Personagem perso1;
	private ShapeRenderer shapeRenderer;
	private Matrix4 isoTransform;
	private Matrix4 invIsotransform;

	@Override
	public void show() {

		batch = new SpriteBatch();
		shapeRenderer = new ShapeRenderer();

		// cria camera
		camera = new OrthographicCamera();
 

		// processador de eventos
		Gdx.input.setInputProcessor(new InputMultiplexer());

		// partida
		Partida partida = new Partida();
		partida.setMapa(mapa);

		// cria mapa
		mapa = new Mapa(camera, (InputMultiplexer) Gdx.input.getInputProcessor(), partida,0);

		// cria personagem
		perso1 = new Personagem(TipoPersonagem.MONSTRO, new Vector3(300, 300, 0),
				(InputMultiplexer) Gdx.input.getInputProcessor(), partida,false,1);
		mapa.pp = perso1;
		matrix = new Matrix4();	
		
		matrix.idt();
		matrix.rotate(10.0f, 0.0f, 1.0f, 0);
		
		
		
		// create the isometric transform
				isoTransform = new Matrix4();
				isoTransform.idt();

				// isoTransform.translate(0, 32, 0);
				isoTransform.translate(10, 120,0);
				isoTransform.scale((float)(Math.sqrt(2.0) / 2.0), (float)(Math.sqrt(2.0) / 4.0), 1.0f);
				isoTransform.rotate(0.0f, 0.0f, 1.0f, -45);

				// ... and the inverse matrix
				invIsotransform = new Matrix4(isoTransform);
				invIsotransform.inv();
				
	}
	Matrix4 matrix ;
	@Override
	public void render(float delta) {
		Gdx.gl.glClearColor(0, 0, 0, 0);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		 
	 
/*
		// shapes
		shapeRenderer.setAutoShapeType(true);
		shapeRenderer.begin();
		perso1.renderShape(shapeRenderer);
		shapeRenderer.end();*/
		
		shapeRenderer.begin(ShapeType.Line);
	
		  shapeRenderer.setTransformMatrix(isoTransform);

		shapeRenderer.rect(100, 100, 30.f, 30.f);
		
		shapeRenderer.end();

	}

	@Override
	public void resize(int width, int height) {
		camera.viewportWidth = width;
		camera.viewportHeight = height;
		camera.update();

	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}

	@Override
	public void hide() {
	}

	@Override
	public void dispose() {
	}

}
